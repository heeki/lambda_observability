AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda observability
Transform: AWS::Serverless-2016-10-31
Globals:
  Function:
    Runtime: python3.8
    MemorySize: 128
    Timeout: 10
    Tracing: Active
Parameters:
  pApiStage:
    Type: String
  pVpcId:
    Type: String
  pSubnetIds:
    Type: List<String>
  pRedisEnabled:
    Type: String
  pRedisEndpoint:
    Type: String
Resources:
  # APIGW
  Api:
    Type: AWS::Serverless::Api
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt ApiLogGroup.Arn
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","routeKey":"$context.routeKey", "status":"$context.status","protocol":"$context.protocol", "responseLength":"$context.responseLength" }'
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            # Location: !Sub 's3://${swaggerBucket}/${swaggerKey}'
            Location: swagger.yaml
      StageName: !Ref pApiStage
      TracingEnabled: true
  ApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/observability-api-${Api}"
      RetentionInDays: 7
  # DynamoDB
  Table:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: event_id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: event_id
          KeyType: HASH
  # Lambda Role
  FnRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/service-role/'
      Policies:
        - PolicyName: cloudwatch-logs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: 'arn:aws:logs:*:*:*'
        - PolicyName: sqs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:ReceiveMessage
                  - sqs:SendMessage
                Resource: !GetAtt Queue.Arn
        - PolicyName: xray
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                  - xray:GetSamplingRules
                  - xray:GetSamplingTargets
                  - xray:GetSamplingStatisticSummaries
                Resource: '*'
        - PolicyName: ec2-v2n
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - ec2:CreateNetworkInterface
              - ec2:DescribeNetworkInterfaces
              - ec2:DeleteNetworkInterface
              Resource: '*'
        - PolicyName: dynamodb
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                Resource: !GetAtt Table.Arn
  # Lambda Security Group
  FnSGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Observability function"
      VpcId: !Ref pVpcId
  # Lambda Producer
  FnProducer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src
      Environment:
        Variables:
          QUEUE_URL: !Ref Queue
          REDIS_ENABLED: !Ref pRedisEnabled
          REDIS_ENDPOINT: !Ref pRedisEndpoint
          TABLE: !Ref Table
      Handler: fn_producer.handler
      Layers:
        - !Ref LayerXray
        - !Ref LayerRedis
      Role: !GetAtt FnRole.Arn
      Tracing: Active
      VpcConfig:
        SecurityGroupIds: [ !Ref FnSGroup ]
        SubnetIds: !Ref pSubnetIds
  FnProducerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${FnProducer}"
      RetentionInDays: 7
  FnProducerPerm:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt FnProducer.Arn
      Principal: apigateway.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*/*/*'
  # Lambda Consumer
  FnConsumer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            BatchSize: 1
            Enabled: true
            # MaximumBatchingWindowInSeconds: 60
            Queue: !GetAtt Queue.Arn
      Handler: fn_consumer.handler
      Layers:
        - !Ref LayerXray
      Role: !GetAtt FnRole.Arn
      Tracing: Active
  FnConsumerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${FnConsumer}"
      RetentionInDays: 7
  # Layers
  LayerXray:
    Type: AWS::Serverless::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.8
      ContentUri: ../tmp/xray
      LayerName: xray-python38
  LayerRedis:
    Type: AWS::Serverless::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.8
      ContentUri: ../tmp/redis
      LayerName: redis-python38
  # SQS
  Queue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 60
      VisibilityTimeout: 30
Outputs:
  outFnProducer:
    Value: !Ref FnProducer
  outFnProducerArn:
    Value: !GetAtt FnProducer.Arn
  outQueueArn:
    Value: !GetAtt Queue.Arn
  outApi:
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com"
  outTable:
    Value: !Ref Table